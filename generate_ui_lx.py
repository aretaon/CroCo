# -*- coding:utf-8 -*-
"""
Generate UI script for teh CroCo cross-link converter

This script bundles call to the PyQt5 compilers pyuic and pyrcc and
automatically generates usable Python files from QDesigner .ui and .qrc
documents.

It additionally corrects for an import path error generated by QDesigner
"""

import sys, os
import re
from subprocess import call

# paths to bins
if sys.platform == "win32":
    bindir = r"C:\ProgramData\Anaconda3\Library\bin"
else:
    bindir = "/home/areaton/anaconda3/bin"
    
uic_path = os.path.join(bindir, 'pyuic5')
rcc_path = os.path.join(bindir, 'pyrcc5')

# path of source files within the project
ui_path = 'qtdesigner'
rc_path = ""
# paths to write the compiled files to
ui_out_path = os.path.join('croco', 'ui')
# dict to set names for the conversion
ui_files = { "CroCo_qt.ui": "ui_mainwindow.py"}
rc_files = {"croco.qrc": "croco_rc.py"}

for file in ui_files:
    # generate file paths for subprocess call
    file_path = os.path.join(ui_path, file)
    out_file_path = os.path.join(ui_out_path, ui_files[file])
    # call the puic compiler
    print(uic_path, "-x", file_path, "-o", out_file_path)
    call([uic_path, "-x", file_path, "-o", out_file_path])
    
    # Correcting path from QDesigner
    buffer = []
    with open(out_file_path, 'r') as i:
        # QDesigner generates an import command FILE_rc that has to be
        # relative to the package i.e. croco.FILE_rc
        pattern = re.compile(r'import (\w+)_rc$')
        # the assignment to self.canvas and self.toolbar has to be
        # removed to assign it to a matplotlib object later
        pattern_canvas = re.compile(r'\s*self\.canvas =')
        pattern_toolbar = re.compile(r'\s*self\.toolbar =')
        for line in i:
            if pattern.match(line):
                match = pattern.match(line)
                line = 'from . import {}_rc'.format( match.group(1))
            if pattern_canvas.match(line) or pattern_toolbar.match(line):
                # avoid the line if its the one declaring self.canvas and 
                # self.toolbar
                continue
            buffer.append(line)
    with open (out_file_path, 'w') as o:
        o.writelines(buffer)

# do the same for the resources compiler
for file in rc_files:
   file_path = os.path.join(rc_path, file)
   out_file_path = os.path.join(ui_out_path, rc_files[file])
   call([rcc_path, file_path, '-o', out_file_path])
